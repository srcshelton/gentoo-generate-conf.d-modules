#!/bin/bash
# Copyright 2016-2017 Stuart Shelton
# Distributed under the terms of the GNU General Public License v2

set -u

#
# generate-modules.conf
#
# Create a file suitable for deployment to /etc/conf.d/modules on baselayout-2
# Gentoo systems, based on currently loaded modules.  The modules list is
# live-generated from the running system, with the option to attempt to load
# all discovered modules and list those which load successfully.
# Additionally, modules parameters are also auto-populated.  Dependent modules
# are listed with their options, but aren't explicitly loaded.
#

declare -i debug="${DEBUG:-0}"
declare -i trace="${TRACE:-0}"

declare INSTALL_MOD_PATH="${INSTALL_MOD_PATH:-/}"

function die() {
	echo >&2 "FATAL: ${*:-Unknown error}"
	exit 1
} # die

function dbg() {
	(( debug )) && echo >&2 "DEBUG: ${*:-}"
} # dbg

function main() {
	local -i modload=0 verbose=0
	local -a messages=() categories=()
	local -A modcat=()
	local watch watchcat
	local module name category

	if grep -Eq ' -(h|-help) ' <<<" ${*} "; then
		echo "Usage: $( basename "${0}" ) [--verbose] [--debug] [--trace] [--load-all-modules] [--watch <module>]"
		exit 0
	fi
	if grep -Eq ' -(d|-debug) ' <<<" ${*} "; then
		debug=1
	fi
	if grep -Eq ' -(t|-trace) ' <<<" ${*} "; then
		trace=1
	fi
	if grep -Eq ' -(v|-verbose) ' <<<" ${*} "; then
		verbose=1
	fi
	if grep -Eq ' -(w|-watch)\s+[^[:space:]]+ ' <<<" ${*} "; then
		watch="$( grep -Eo ' -(w|-watch)\s+[^[:space:]]+ ' <<<" ${*} " | tr -s '[:space:]' | cut -d' ' -f 3- | sed 's/\s*$// ; s/-/_/g' )"

		[[ -n "${watch:-}" ]] || die "Cannot identify module to watch from parameters '${*:-}'"

		echo >&2 "NOTICE: Watching module '${watch:-}'"
	fi
	if grep -Eq ' -(l|-load-all-modules) ' <<<" ${*} "; then
		(( EUID )) && die "$( basename "${0}" ) must be executed as the super-user in order to load modules"
		modload=1
	fi

	(( trace )) && set -o xtrace

	local modpath
	modpath="${INSTALL_MOD_PATH%/}/lib/modules/$( uname -r )/kernel/"
	[[ -d "${modpath}" ]] ||
		die "Cannot locate kernel modules beneath '${modpath}'"

	(( verbose )) && echo >&2 "Discovering modules for kernel $( uname -r ) ..."
	while read -r module; do
		[[ "$( dirname "${module}" )" == "." ]] && die "Malformed module name '${module}'"

		name="$( basename "${module}" )"
		category="$( dirname "${module}" )"
		modcat["${name}"]="${category}"

		dbg "Adding module '${name}' in category '${category}' ..."
		if [[ -n "${watch:-}" && "${watch}" == "${name}" ]]; then
			watchcat="${category}"
			echo >&2 "NOTICE: Found watched module '${watch}' from filesystem in category '${watchcat}'"
		fi

		if (( modload )); then
			local output="" olddmesg dmesg

			if ! output="$( modprobe --use-blacklist --dry-run "${name}" 2>&1 )"; then
				messages+=( "Simulated insertion of module '${name}' failed: ${output}" )
			else
				olddmesg="$( dmesg -tx )"
				if ! output="$( modprobe --use-blacklist "${name}" 2>&1 )"; then
					messages+=( "Insertion of module '${name}' failed: ${output}" )
				else
					(( debug )) && messages+=( "Insertion of module '${name}' succeeded${output:+: ${output}}" )
				fi
				dmesg="$( dmesg -tx )"
				if [[ "${olddmesg}" != "${dmesg}" ]]; then
					messages+=( "$( diff --text --suppress-common-lines <( cat <<<"${olddmesg}" ) <( cat <<<"${dmesg}" ) | tail -n +2 | grep -Ev '^(< | [0-9,]+a[0-9,]+$)' | sed "s/^> /${name}: /g" )" )
				fi
			fi
		fi
	done < <(
		find "${modpath}" -type f -name \*.ko\* |
		sed "s|^.*/$( uname -r | sed 's/\./\\./g' )/kernel/||" |
		sed 's/\.ko\(\..*\)\?$// ; s/-/_/g'
	)

	unset modpath

	if [[ -n "${watch:-}" && -z "${watchcat:-}" ]]; then
		die "Did not find sought module '${watch}' on filesystem"
	fi

	local -i repeat=1 number

	(( verbose )) && echo >&2 "Collapsing categories ..."
	while (( repeat )); do
		repeat=0

		while read -r number category; do
			if (( 1 == number )); then
				if [[ "${category}" =~ / ]]; then
					for name in "${!modcat[@]}"; do
						# We actually need to scan everything in order to check for
						# common categories (e.g. not reducing 'arch/x86/platform/intel'
						# to 'arch' when 'arch/x86/kernel' and 'arch/x86/crypto' exist)
						# To do this we need to skip cases where the category exists as
						# a prefix...
						if [[ "${modcat["${name}"]}" =~ ^${category}/ ]]; then
							module=""
							#dbg "Found common root category '${category}/' for '${modcat["${name}"]}' (used by at least '${name}') - breaking"
							break
						fi
						if [[ "${modcat["${name}"]}" == "${category}" ]]; then
							module="${name}"
							#dbg "Found single module '${module}' for '${category}'"
						fi
					done

					if [[ -n "${module}" ]]; then
						dbg "Adjusting category for '${module}' from '${category}' to '$( dirname "${category}" )'"
						modcat["${module}"]="$( dirname "${category}" )"

						if [[ -n "${watch:-}" && "${watchcat}" == "${category}" ]]; then
							echo >&2 "NOTICE: Watched module '${watch}' had category '${watchcat}', now reduced to '${modcat["${watch}"]}'"
							watchcat="${modcat["${watch}"]}"
						fi

						repeat=1
					fi
				fi
			fi
		done < <(
			for name in "${!modcat[@]}"; do
				echo "${modcat["${name}"]}"
			done | LC_ALL=C sort | uniq -c
		)

		#(( repeat )) && dbg "Looping"
	done

	readarray -t categories < <(
		for module in "${!modcat[@]}"; do
			echo "${modcat["${module}"]}"
		done | LC_ALL=C sort | uniq 
	)
	if (( debug )); then
		echo >&2 "Discovered categories:"
		for module in "${!modcat[@]}"; do
			echo "${modcat["${module}"]}"
		done | LC_ALL=C sort | uniq -c >&2
	fi

	if [[ -n "${watch:-}" ]]; then
		echo >&2 "NOTICE: Watched module '${watch}' has final category '${modcat["${watch}"]}'"
	fi

	(( verbose )) && echo >&2 "Producing output file ..."
	cat <<-EOF
# Linux users can define a list of modules for a specific kernel version,
# a released kernel version, a main kernel version or all kernel versions.
# The most specific versioned variable will take precedence.
# FreeBSD users can only use the modules="foo bar" setting.
#modules_4_9_6_gentoo_r1="ieee1394 ohci1394"
#modules_4_9_6="tun ieee1394"
#modules_4_9="tun"
#modules_4="ipv6"
#modules="ohci1394"

# Linux users can give modules a different name when they load - the new name
# will also be used to pick arguments below.
# This is not supported on FreeBSD.
#modules="modname:alias"

# Linux users can give the modules some arguments if needed, per version
# if necessary.
# Again, the most specific versioned variable will take precedence.
# This is not supported on FreeBSD.
#module_ieee1394_args_4_9_6_gentoo_r1="debug5"
#module_ieee1394_args_4_9_6="debug4"
#module_ieee1394_args_4_9="debug3"
#module_ieee1394_args_4="debug2"
#module_ieee1394_args="debug1"

# You should consult your kernel documentation and configuration
# for a list of modules and their options.

modules=''
	EOF

	local -a dependency
	readarray -t dependency < <( lsmod | tail -n +2 | sed 's/^\([a-zA-Z0-9_]\+\)\s\+\([0-9]\+\)\s\+\([0-9]\+\)\s*\(.*\)\?$/\1: \4/ ; s/,/ /g' | grep -v ': $' | cut -d':' -f 1 )

	local -a leafnode
	#leafnode=( $( lsmod | tail -n +2 | grep '\s[0-9]\+\s\+[0-9]\+$' | cut -d' ' -f 1 ) )
	readarray -t leafnode < <( lsmod | tail -n +2 | sed 's/^\([a-zA-Z0-9_]\+\)\s\+\([0-9]\+\)\s\+\([0-9]\+\)\s*\(.*\)\?$/\1: \4/ ; s/,/ /g' | grep ': $' | cut -d':' -f 1 )

	if [[ -n "${watch:-}" ]]; then
		grep -q " ${watch} " <<<" ${dependency[*]} " && echo >&2 "NOTICE: Watched module '${watch}' is in a dependency chain"
		grep -q " ${watch} " <<<" ${leafnode[*]} " && echo >&2 "NOTICE: Watched module '${watch}' is a leaf-node"
	fi

	if (( ${#leafnode[@]} )); then
		# For each (potentially squashed) category ...
		for category in "${categories[@]}"; do
			local -a list=()

			# ... and then build a list of every leaf-node module in the current category.
			for module in "${!modcat[@]}"; do
				# For each module check whether the assigned category is the current one
				# and, if so, see whether the module in question is amongst the leaf-node modules
				# and add it to the list.
				[[ "${modcat["${module}"]}" == "${category}" ]] &&
					grep -q " ${module} " <<<" ${leafnode[*]} " &&
					list+=( "${module}" )
			done
			(( ${#list[@]} )) && echo -e "\n# ${category}:\n#\nmodules=\"\${modules} ${list[*]}\""

			unset list

			local -i output=0
			local entry key type # desc

			for module in "${!modcat[@]}"; do
				if [[ "${modcat["${module}"]}" == "${category}" ]]; then
					if grep -qw "${module}" <<<"${leafnode[*]}"; then
						if modinfo "${module}" | grep -q '^parm:'; then
							output=0
							echo -n "#module_${module//-/_}_args=\""
							while read -r entry; do
								key="$( cut -d':' -f 1 <<<"${entry}" )"
								if [[ "${entry}" == "${key}:bool" ]]; then
									type="bool"
									#desc="None provided"
								else
									type="$( rev <<<"${entry}" | grep -o '^)[^(]\+(' | rev | sed 's/[()]//g' )"
									#desc="$( sed "s/^${key}:\(.*\) (${type})/\1/" <<<"${entry}" )"
								fi

								(( output )) && echo -n ','
								if [[ -n "${type}" ]]; then
									echo -n "${key}=(${type})"
								else
									echo -n "${key}"
								fi
								output=1
							done < <(
								modinfo "${module}" |
								grep '^parm:' |
								sed 's/^parm:\s\+//'
							)
							echo '"'
						fi
					fi
				fi
			done | LC_ALL=C sort | uniq

			unset type key entry output # desc
		done
	fi

	if (( ${#dependency[@]} )); then
		cat <<-EOF

# Dependent modules
#
# The following modules were loaded as dependencies of the modules above,
# rather than necessarily being directly required...
#
		EOF
		for category in $(
			for module in "${!modcat[@]}"; do
				echo "${modcat["${module}"]}"
			done | LC_ALL=C sort | uniq
		); do
			local -a list=()

			for module in "${!modcat[@]}"; do
				[[ "${modcat["${module}"]}" == "${category}" ]] &&
					grep -qw "${module}" <<<"${dependency[*]}" &&
					list+=( "${module}" )
			done
			(( ${#list[@]} )) && echo -e "\n# ${category}:\n#\n#modules=\"\${modules} ${list[*]}\""

			unset list

			local -i output=0
			local entry key type # desc

			for module in "${!modcat[@]}"; do
				if [[ "${modcat["${module}"]}" == "${category}" ]]; then
					if grep -qw "${module}" <<<"${dependency[*]}"; then
						if modinfo "${module}" | grep -q '^parm:'; then
							output=0
							echo -n "#module_${module//-/_}_args=\""
							while read -r entry; do
								key="$( cut -d':' -f 1 <<<"${entry}" )"
								if [[ "${entry}" == "${key}:bool" ]]; then
									type="bool"
									#desc=""
								else
									type="$( rev <<<"${entry}" | grep -o '^)[^(]\+(' | rev | sed 's/[()]//g' )"
									#desc="$( sed "s/^${key}:\(.*\) (${type})/\1/" <<<"${entry}" )"
								fi

								(( output )) && echo -n ','
								if [[ -n "${type}" ]]; then
									echo -n "${key}=(${type})"
								else
									echo -n "${key}"
								fi
								output=1
							done < <(
								modinfo "${module}" |
								grep '^parm:' |
								sed 's/^parm:\s\+//'
							)
							echo '"'
						fi
					fi
				fi
			done | LC_ALL=C sort | uniq

			unset type key entry output # desc
		done
	fi

	cat <<-EOF

# vi: set nowrap syntax=conf:
	EOF

	unset leafnode dependency

	if (( "${#messages[@]}" )); then
		local message

		(( verbose )) && echo >&2 -e "\nModule load results ..."
		echo >&2
		for message in "${messages[@]}"; do
			echo >&2 "${message}"
		done

		unset message
	fi

	(( trace )) && set +o xtrace
} # main

main "${@:-}"
exit ${?}

# vi: set syntax=sh:
